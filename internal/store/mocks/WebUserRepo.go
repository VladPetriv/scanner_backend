// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	model "github.com/VladPetriv/scanner_backend/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// WebUserRepo is an autogenerated mock type for the WebUserRepo type
type WebUserRepo struct {
	mock.Mock
}

// CreateWebUser provides a mock function with given fields: user
func (_m *WebUserRepo) CreateWebUser(user *model.WebUser) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.WebUser) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetWebUserByEmail provides a mock function with given fields: email
func (_m *WebUserRepo) GetWebUserByEmail(email string) (*model.WebUser, error) {
	ret := _m.Called(email)

	var r0 *model.WebUser
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.WebUser, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *model.WebUser); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.WebUser)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWebUserByID provides a mock function with given fields: id
func (_m *WebUserRepo) GetWebUserByID(id int) (*model.WebUser, error) {
	ret := _m.Called(id)

	var r0 *model.WebUser
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*model.WebUser, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *model.WebUser); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.WebUser)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewWebUserRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewWebUserRepo creates a new instance of WebUserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWebUserRepo(t mockConstructorTestingTNewWebUserRepo) *WebUserRepo {
	mock := &WebUserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
