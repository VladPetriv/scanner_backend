// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	model "github.com/VladPetriv/scanner_backend/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// ReplyRepo is an autogenerated mock type for the ReplyRepo type
type ReplyRepo struct {
	mock.Mock
}

// CreateReply provides a mock function with given fields: reply
func (_m *ReplyRepo) CreateReply(reply *model.DBReply) error {
	ret := _m.Called(reply)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.DBReply) error); ok {
		r0 = rf(reply)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFullRepliesByMessageID provides a mock function with given fields: id
func (_m *ReplyRepo) GetFullRepliesByMessageID(id int) ([]model.FullReply, error) {
	ret := _m.Called(id)

	var r0 []model.FullReply
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]model.FullReply, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) []model.FullReply); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.FullReply)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewReplyRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewReplyRepo creates a new instance of ReplyRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReplyRepo(t mockConstructorTestingTNewReplyRepo) *ReplyRepo {
	mock := &ReplyRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
