// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	model "github.com/VladPetriv/scanner_backend/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// ChannelRepo is an autogenerated mock type for the ChannelRepo type
type ChannelRepo struct {
	mock.Mock
}

// CreateChannel provides a mock function with given fields: channel
func (_m *ChannelRepo) CreateChannel(channel *model.DBChannel) error {
	ret := _m.Called(channel)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.DBChannel) error); ok {
		r0 = rf(channel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetChannelByName provides a mock function with given fields: name
func (_m *ChannelRepo) GetChannelByName(name string) (*model.Channel, error) {
	ret := _m.Called(name)

	var r0 *model.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Channel, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Channel); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Channel)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChannelStats provides a mock function with given fields: channelID
func (_m *ChannelRepo) GetChannelStats(channelID int) (*model.Stat, error) {
	ret := _m.Called(channelID)

	var r0 *model.Stat
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*model.Stat, error)); ok {
		return rf(channelID)
	}
	if rf, ok := ret.Get(0).(func(int) *model.Stat); ok {
		r0 = rf(channelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Stat)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(channelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChannels provides a mock function with given fields:
func (_m *ChannelRepo) GetChannels() ([]model.Channel, error) {
	ret := _m.Called()

	var r0 []model.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Channel, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Channel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Channel)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChannelsByPage provides a mock function with given fields: page
func (_m *ChannelRepo) GetChannelsByPage(page int) ([]model.Channel, error) {
	ret := _m.Called(page)

	var r0 []model.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]model.Channel, error)); ok {
		return rf(page)
	}
	if rf, ok := ret.Get(0).(func(int) []model.Channel); ok {
		r0 = rf(page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Channel)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewChannelRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewChannelRepo creates a new instance of ChannelRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewChannelRepo(t mockConstructorTestingTNewChannelRepo) *ChannelRepo {
	mock := &ChannelRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
